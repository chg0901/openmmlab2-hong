2023/06/08 01:45:20 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 23
    GPU 0: NVIDIA GeForce GTX 1080 Ti
    CUDA_HOME: /usr/local/cuda-11.6
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0
    PyTorch: 1.10.1+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.2+cu113
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 23
    deterministic: False
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/08 01:45:20 - mmengine - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(
        type='ResNet',
        depth=18,
        num_stages=4,
        out_indices=(3, ),
        style='pytorch'),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=2,
        in_channels=512,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)),
    init_cfg=dict(
        type='Pretrained',
        checkpoint=
        'https://download.openmmlab.com/mmclassification/v0/resnet/resnet18_8xb32_in1k_20210831-fbbb1da6.pth'
    ))
dataset_type = 'CustomDataset'
data_preprocessor = dict(
    num_classes=2,
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='RandomResizedCrop', scale=224),
    dict(type='RandomFlip', prob=0.5, direction='horizontal'),
    dict(type='PackInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='ResizeEdge', scale=256, edge='short'),
    dict(type='CenterCrop', crop_size=224),
    dict(type='PackInputs')
]
train_dataloader = dict(
    batch_size=32,
    num_workers=5,
    dataset=dict(
        type='CustomDataset',
        data_root='../../data/cats_dogs_dataset/training_set',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', scale=224),
            dict(type='RandomFlip', prob=0.5, direction='horizontal'),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=True))
val_dataloader = dict(
    batch_size=32,
    num_workers=5,
    dataset=dict(
        type='CustomDataset',
        data_root='../../data/cats_dogs_dataset/test_set',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
val_evaluator = dict(type='Accuracy', topk=1)
test_dataloader = dict(
    pin_memory=True,
    collate_fn=dict(type='default_collate'),
    batch_size=32,
    num_workers=5,
    dataset=dict(
        type='CustomDataset',
        data_root='../../data/cats_dogs_dataset/test_set',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='ResizeEdge', scale=256, edge='short'),
            dict(type='CenterCrop', crop_size=224),
            dict(type='PackInputs')
        ]),
    sampler=dict(type='DefaultSampler', shuffle=False))
test_evaluator = dict(type='Accuracy', topk=1)
optim_wrapper = dict(
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0001))
param_scheduler = dict(
    type='MultiStepLR', by_epoch=True, milestones=[30, 60, 90], gamma=0.1)
train_cfg = dict(by_epoch=True, max_epochs=5, val_interval=2)
val_cfg = dict()
test_cfg = dict()
auto_scale_lr = dict(base_batch_size=256)
default_scope = 'mmpretrain'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=2),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook', interval=1, max_keep_ckpts=2, save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='VisualizationHook', enable=False))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='UniversalVisualizer', vis_backends=[dict(type='LocalVisBackend')])
log_level = 'INFO'
load_from = 'exp/epoch_5.pth'
resume = False
randomness = dict(seed=23, deterministic=False)
launcher = 'none'
work_dir = './work_dirs/resnet18_fintuneM'

2023/06/08 01:45:24 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/08 01:45:24 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) VisualizationHook                  
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/08 01:45:24 - mmengine - WARNING - The prefix is not set in metric class DumpResults.
2023/06/08 01:45:25 - mmengine - INFO - Load checkpoint from exp/epoch_5.pth
2023/06/08 01:45:25 - mmengine - INFO - Epoch(test) [ 2/64]    eta: 0:00:11  time: 0.1808  data_time: 0.1311  memory: 267  
2023/06/08 01:45:25 - mmengine - INFO - Epoch(test) [ 4/64]    eta: 0:00:06  time: 0.1007  data_time: 0.0659  memory: 267  
2023/06/08 01:45:25 - mmengine - INFO - Epoch(test) [ 6/64]    eta: 0:00:04  time: 0.0742  data_time: 0.0440  memory: 267  
2023/06/08 01:45:25 - mmengine - INFO - Epoch(test) [ 8/64]    eta: 0:00:03  time: 0.0606  data_time: 0.0331  memory: 267  
2023/06/08 01:45:25 - mmengine - INFO - Epoch(test) [10/64]    eta: 0:00:02  time: 0.0525  data_time: 0.0266  memory: 267  
2023/06/08 01:45:25 - mmengine - INFO - Epoch(test) [12/64]    eta: 0:00:02  time: 0.0203  data_time: 0.0004  memory: 267  
2023/06/08 01:45:25 - mmengine - INFO - Epoch(test) [14/64]    eta: 0:00:02  time: 0.0204  data_time: 0.0004  memory: 267  
2023/06/08 01:45:25 - mmengine - INFO - Epoch(test) [16/64]    eta: 0:00:01  time: 0.0202  data_time: 0.0004  memory: 267  
2023/06/08 01:45:25 - mmengine - INFO - Epoch(test) [18/64]    eta: 0:00:01  time: 0.0202  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [20/64]    eta: 0:00:01  time: 0.0202  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [22/64]    eta: 0:00:01  time: 0.0203  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [24/64]    eta: 0:00:01  time: 0.0201  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [26/64]    eta: 0:00:01  time: 0.0202  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [28/64]    eta: 0:00:01  time: 0.0204  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [30/64]    eta: 0:00:01  time: 0.0202  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [32/64]    eta: 0:00:00  time: 0.0201  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [34/64]    eta: 0:00:00  time: 0.0200  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [36/64]    eta: 0:00:00  time: 0.0199  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [38/64]    eta: 0:00:00  time: 0.0196  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [40/64]    eta: 0:00:00  time: 0.0196  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [42/64]    eta: 0:00:00  time: 0.0194  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [44/64]    eta: 0:00:00  time: 0.0196  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [46/64]    eta: 0:00:00  time: 0.0197  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [48/64]    eta: 0:00:00  time: 0.0198  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [50/64]    eta: 0:00:00  time: 0.0198  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [52/64]    eta: 0:00:00  time: 0.0200  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [54/64]    eta: 0:00:00  time: 0.0198  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [56/64]    eta: 0:00:00  time: 0.0193  data_time: 0.0005  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [58/64]    eta: 0:00:00  time: 0.0190  data_time: 0.0004  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [60/64]    eta: 0:00:00  time: 0.0190  data_time: 0.0004  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [62/64]    eta: 0:00:00  time: 0.0188  data_time: 0.0004  memory: 267  
2023/06/08 01:45:26 - mmengine - INFO - Epoch(test) [64/64]    eta: 0:00:00  time: 0.0173  data_time: 0.0004  memory: 267  
2023/06/08 01:45:27 - mmengine - INFO - Results has been saved to result.pkl.
2023/06/08 01:45:27 - mmengine - INFO - Epoch(test) [64/64]    accuracy/top1: 96.7869  data_time: 0.0045  time: 0.0246
