2023/06/15 15:55:58 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 42
    GPU 0: NVIDIA GeForce GTX 1080 Ti
    CUDA_HOME: /usr/local/cuda-11.6
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0
    PyTorch: 1.10.1+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.2+cu113
    OpenCV: 4.7.0
    MMEngine: 0.7.1

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 42
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/15 15:55:58 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(128, 96)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'StanfordBackgroundDataset'
data_root = 'Glomeruli-dataset'
crop_size = (128, 96)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(320, 240),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(128, 96), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(320, 240), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(320, 240),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(128, 96), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/train.txt'))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = 'pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=2800, val_interval=400)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=400),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs/tutorial'
randomness = dict(seed=42)

2023/06/15 15:55:59 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/15 15:55:59 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/15 15:56:30 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/15 15:56:30 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/15 15:56:30 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/15 15:56:30 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([2, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([2, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/15 15:56:30 - mmengine - INFO - Load checkpoint from pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth
2023/06/15 15:56:30 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/15 15:56:30 - mmengine - INFO - Checkpoints will be saved to /home/cine/Documents/GitHub/mmsegmentation/work_dirs/tutorial.
2023/06/15 15:56:40 - mmengine - INFO - Iter(train) [ 100/2800]  lr: 9.9779e-03  eta: 0:04:09  time: 0.0950  data_time: 0.0117  memory: 1799  loss: 0.1513  decode.loss_ce: 0.1109  decode.acc_seg: 100.0000  aux.loss_ce: 0.0404  aux.acc_seg: 100.0000
2023/06/15 15:56:49 - mmengine - INFO - Iter(train) [ 200/2800]  lr: 9.9557e-03  eta: 0:04:02  time: 0.0895  data_time: 0.0051  memory: 1799  loss: 0.0934  decode.loss_ce: 0.0661  decode.acc_seg: 100.0000  aux.loss_ce: 0.0273  aux.acc_seg: 100.0000
2023/06/15 15:56:55 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230615_155558
2023/06/15 15:56:58 - mmengine - INFO - Iter(train) [ 300/2800]  lr: 9.9334e-03  eta: 0:03:52  time: 0.0906  data_time: 0.0067  memory: 1799  loss: 0.1173  decode.loss_ce: 0.0830  decode.acc_seg: 96.7845  aux.loss_ce: 0.0343  aux.acc_seg: 96.7845
2023/06/15 15:57:08 - mmengine - INFO - Iter(train) [ 400/2800]  lr: 9.9111e-03  eta: 0:03:42  time: 0.0893  data_time: 0.0048  memory: 1799  loss: 0.0720  decode.loss_ce: 0.0509  decode.acc_seg: 100.0000  aux.loss_ce: 0.0212  aux.acc_seg: 100.0000
2023/06/15 15:57:08 - mmengine - INFO - Saving checkpoint at 400 iterations
2023/06/15 15:57:13 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0358  data_time: 0.0022  memory: 1186  
2023/06/15 15:57:17 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0359  data_time: 0.0022  memory: 1186  
2023/06/15 15:57:21 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0357  data_time: 0.0022  memory: 1186  
2023/06/15 15:57:24 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0349  data_time: 0.0021  memory: 1186  
2023/06/15 15:57:28 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0358  data_time: 0.0022  memory: 1186  
2023/06/15 15:57:28 - mmengine - INFO - per class results:
2023/06/15 15:57:28 - mmengine - INFO - 
+------------+------+-------+
|   Class    | IoU  |  Acc  |
+------------+------+-------+
| background | 98.1 | 100.0 |
| glomeruili | 0.0  |  0.0  |
+------------+------+-------+
2023/06/15 15:57:28 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.1000  mIoU: 49.0500  mAcc: 50.0000  data_time: 0.0022  time: 0.0357
2023/06/15 15:57:38 - mmengine - INFO - Iter(train) [ 500/2800]  lr: 9.8888e-03  eta: 0:03:33  time: 0.1009  data_time: 0.0160  memory: 1799  loss: 0.1507  decode.loss_ce: 0.1090  decode.acc_seg: 91.2582  aux.loss_ce: 0.0417  aux.acc_seg: 91.3889
2023/06/15 15:57:47 - mmengine - INFO - Iter(train) [ 600/2800]  lr: 9.8665e-03  eta: 0:03:24  time: 0.0935  data_time: 0.0094  memory: 1799  loss: 0.1259  decode.loss_ce: 0.0919  decode.acc_seg: 96.9452  aux.loss_ce: 0.0340  aux.acc_seg: 98.3582
2023/06/15 15:57:56 - mmengine - INFO - Iter(train) [ 700/2800]  lr: 9.8442e-03  eta: 0:03:15  time: 0.0996  data_time: 0.0143  memory: 1799  loss: 0.1143  decode.loss_ce: 0.0808  decode.acc_seg: 93.7998  aux.loss_ce: 0.0335  aux.acc_seg: 90.1113
2023/06/15 15:58:06 - mmengine - INFO - Iter(train) [ 800/2800]  lr: 9.8218e-03  eta: 0:03:06  time: 0.0905  data_time: 0.0050  memory: 1799  loss: 0.2014  decode.loss_ce: 0.1465  decode.acc_seg: 95.3400  aux.loss_ce: 0.0548  aux.acc_seg: 94.4468
2023/06/15 15:58:06 - mmengine - INFO - Saving checkpoint at 800 iterations
2023/06/15 15:58:12 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:14  time: 0.0359  data_time: 0.0022  memory: 1186  
2023/06/15 15:58:15 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0359  data_time: 0.0021  memory: 1186  
2023/06/15 15:58:19 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0350  data_time: 0.0022  memory: 1186  
2023/06/15 15:58:22 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0351  data_time: 0.0021  memory: 1186  
2023/06/15 15:58:26 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0359  data_time: 0.0022  memory: 1186  
2023/06/15 15:58:26 - mmengine - INFO - per class results:
2023/06/15 15:58:26 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background |  98.4 | 99.02 |
| glomeruili | 44.88 | 67.64 |
+------------+-------+-------+
2023/06/15 15:58:26 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.4200  mIoU: 71.6400  mAcc: 83.3300  data_time: 0.0021  time: 0.0352
2023/06/15 15:58:36 - mmengine - INFO - Iter(train) [ 900/2800]  lr: 9.7995e-03  eta: 0:02:57  time: 0.0929  data_time: 0.0080  memory: 1799  loss: 0.1677  decode.loss_ce: 0.1200  decode.acc_seg: 99.9715  aux.loss_ce: 0.0477  aux.acc_seg: 100.0000
2023/06/15 15:58:45 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230615_155558
2023/06/15 15:58:45 - mmengine - INFO - Iter(train) [1000/2800]  lr: 9.7772e-03  eta: 0:02:48  time: 0.0963  data_time: 0.0100  memory: 1799  loss: 0.1192  decode.loss_ce: 0.0864  decode.acc_seg: 97.2137  aux.loss_ce: 0.0328  aux.acc_seg: 97.2137
2023/06/15 15:58:54 - mmengine - INFO - Iter(train) [1100/2800]  lr: 9.7549e-03  eta: 0:02:38  time: 0.0972  data_time: 0.0079  memory: 1799  loss: 0.0755  decode.loss_ce: 0.0528  decode.acc_seg: 97.0367  aux.loss_ce: 0.0227  aux.acc_seg: 98.4904
2023/06/15 15:59:04 - mmengine - INFO - Iter(train) [1200/2800]  lr: 9.7325e-03  eta: 0:02:29  time: 0.1019  data_time: 0.0125  memory: 1799  loss: 0.0844  decode.loss_ce: 0.0605  decode.acc_seg: 99.3215  aux.loss_ce: 0.0239  aux.acc_seg: 97.8770
2023/06/15 15:59:04 - mmengine - INFO - Saving checkpoint at 1200 iterations
2023/06/15 15:59:09 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0360  data_time: 0.0022  memory: 1186  
2023/06/15 15:59:12 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0364  data_time: 0.0022  memory: 1186  
2023/06/15 15:59:16 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0358  data_time: 0.0023  memory: 1186  
2023/06/15 15:59:19 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0351  data_time: 0.0022  memory: 1186  
2023/06/15 15:59:23 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0357  data_time: 0.0021  memory: 1186  
2023/06/15 15:59:24 - mmengine - INFO - per class results:
2023/06/15 15:59:24 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 98.43 | 99.92 |
| glomeruili |  20.7 | 21.51 |
+------------+-------+-------+
2023/06/15 15:59:24 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.4300  mIoU: 59.5700  mAcc: 60.7200  data_time: 0.0021  time: 0.0357
2023/06/15 15:59:33 - mmengine - INFO - Iter(train) [1300/2800]  lr: 9.7102e-03  eta: 0:02:20  time: 0.0931  data_time: 0.0046  memory: 1799  loss: 0.1401  decode.loss_ce: 0.0976  decode.acc_seg: 95.8323  aux.loss_ce: 0.0424  aux.acc_seg: 96.4536
2023/06/15 15:59:42 - mmengine - INFO - Iter(train) [1400/2800]  lr: 9.6878e-03  eta: 0:02:10  time: 0.0911  data_time: 0.0057  memory: 1799  loss: 0.0940  decode.loss_ce: 0.0657  decode.acc_seg: 97.0957  aux.loss_ce: 0.0284  aux.acc_seg: 95.2779
2023/06/15 15:59:51 - mmengine - INFO - Iter(train) [1500/2800]  lr: 9.6655e-03  eta: 0:02:01  time: 0.0921  data_time: 0.0064  memory: 1799  loss: 0.0917  decode.loss_ce: 0.0643  decode.acc_seg: 100.0000  aux.loss_ce: 0.0274  aux.acc_seg: 100.0000
2023/06/15 16:00:01 - mmengine - INFO - Iter(train) [1600/2800]  lr: 9.6431e-03  eta: 0:01:51  time: 0.0996  data_time: 0.0089  memory: 1799  loss: 0.0629  decode.loss_ce: 0.0431  decode.acc_seg: 100.0000  aux.loss_ce: 0.0198  aux.acc_seg: 99.9949
2023/06/15 16:00:01 - mmengine - INFO - Saving checkpoint at 1600 iterations
2023/06/15 16:00:06 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0356  data_time: 0.0022  memory: 1186  
2023/06/15 16:00:09 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0362  data_time: 0.0022  memory: 1186  
2023/06/15 16:00:13 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0351  data_time: 0.0022  memory: 1186  
2023/06/15 16:00:16 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0355  data_time: 0.0022  memory: 1186  
2023/06/15 16:00:20 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0362  data_time: 0.0022  memory: 1186  
2023/06/15 16:00:20 - mmengine - INFO - per class results:
2023/06/15 16:00:20 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 98.57 | 98.94 |
| glomeruili | 52.32 | 81.03 |
+------------+-------+-------+
2023/06/15 16:00:20 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.6000  mIoU: 75.4500  mAcc: 89.9800  data_time: 0.0022  time: 0.0358
2023/06/15 16:00:30 - mmengine - INFO - Iter(train) [1700/2800]  lr: 9.6207e-03  eta: 0:01:42  time: 0.0939  data_time: 0.0079  memory: 1799  loss: 0.0496  decode.loss_ce: 0.0345  decode.acc_seg: 100.0000  aux.loss_ce: 0.0151  aux.acc_seg: 100.0000
2023/06/15 16:00:39 - mmengine - INFO - Iter(train) [1800/2800]  lr: 9.5983e-03  eta: 0:01:33  time: 0.0995  data_time: 0.0059  memory: 1799  loss: 0.0973  decode.loss_ce: 0.0699  decode.acc_seg: 95.0968  aux.loss_ce: 0.0273  aux.acc_seg: 94.7133
2023/06/15 16:00:49 - mmengine - INFO - Iter(train) [1900/2800]  lr: 9.5760e-03  eta: 0:01:24  time: 0.1022  data_time: 0.0171  memory: 1799  loss: 0.0929  decode.loss_ce: 0.0674  decode.acc_seg: 95.9829  aux.loss_ce: 0.0255  aux.acc_seg: 96.7824
2023/06/15 16:00:58 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230615_155558
2023/06/15 16:00:58 - mmengine - INFO - Iter(train) [2000/2800]  lr: 9.5536e-03  eta: 0:01:14  time: 0.0942  data_time: 0.0082  memory: 1799  loss: 0.0621  decode.loss_ce: 0.0427  decode.acc_seg: 99.4171  aux.loss_ce: 0.0194  aux.acc_seg: 99.0285
2023/06/15 16:00:58 - mmengine - INFO - Saving checkpoint at 2000 iterations
2023/06/15 16:01:03 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0364  data_time: 0.0023  memory: 1186  
2023/06/15 16:01:07 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0363  data_time: 0.0022  memory: 1186  
2023/06/15 16:01:10 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0359  data_time: 0.0024  memory: 1186  
2023/06/15 16:01:14 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0356  data_time: 0.0022  memory: 1186  
2023/06/15 16:01:18 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0363  data_time: 0.0023  memory: 1186  
2023/06/15 16:01:18 - mmengine - INFO - per class results:
2023/06/15 16:01:18 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background |  97.8 | 98.21 |
| glomeruili | 40.78 | 78.52 |
+------------+-------+-------+
2023/06/15 16:01:18 - mmengine - INFO - Iter(val) [515/515]  aAcc: 97.8300  mIoU: 69.2900  mAcc: 88.3600  data_time: 0.0022  time: 0.0354
2023/06/15 16:01:28 - mmengine - INFO - Iter(train) [2100/2800]  lr: 9.5312e-03  eta: 0:01:05  time: 0.0962  data_time: 0.0081  memory: 1799  loss: 0.0660  decode.loss_ce: 0.0459  decode.acc_seg: 99.3519  aux.loss_ce: 0.0201  aux.acc_seg: 99.2895
2023/06/15 16:01:37 - mmengine - INFO - Iter(train) [2200/2800]  lr: 9.5088e-03  eta: 0:00:56  time: 0.0997  data_time: 0.0147  memory: 1799  loss: 0.0627  decode.loss_ce: 0.0431  decode.acc_seg: 97.8353  aux.loss_ce: 0.0195  aux.acc_seg: 97.3826
2023/06/15 16:01:47 - mmengine - INFO - Iter(train) [2300/2800]  lr: 9.4864e-03  eta: 0:00:46  time: 0.0933  data_time: 0.0051  memory: 1799  loss: 0.0784  decode.loss_ce: 0.0552  decode.acc_seg: 92.6727  aux.loss_ce: 0.0231  aux.acc_seg: 93.9860
2023/06/15 16:01:56 - mmengine - INFO - Iter(train) [2400/2800]  lr: 9.4640e-03  eta: 0:00:37  time: 0.1006  data_time: 0.0056  memory: 1799  loss: 0.0939  decode.loss_ce: 0.0677  decode.acc_seg: 100.0000  aux.loss_ce: 0.0262  aux.acc_seg: 100.0000
2023/06/15 16:01:56 - mmengine - INFO - Saving checkpoint at 2400 iterations
2023/06/15 16:02:01 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0360  data_time: 0.0022  memory: 1186  
2023/06/15 16:02:05 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0368  data_time: 0.0023  memory: 1186  
2023/06/15 16:02:08 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0354  data_time: 0.0023  memory: 1186  
2023/06/15 16:02:12 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0359  data_time: 0.0024  memory: 1186  
2023/06/15 16:02:15 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0361  data_time: 0.0023  memory: 1186  
2023/06/15 16:02:16 - mmengine - INFO - per class results:
2023/06/15 16:02:16 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.23 | 99.58 |
| glomeruili |  67.1 | 81.64 |
+------------+-------+-------+
2023/06/15 16:02:16 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.2400  mIoU: 83.1600  mAcc: 90.6100  data_time: 0.0023  time: 0.0362
2023/06/15 16:02:25 - mmengine - INFO - Iter(train) [2500/2800]  lr: 9.4416e-03  eta: 0:00:28  time: 0.0936  data_time: 0.0077  memory: 1799  loss: 0.0644  decode.loss_ce: 0.0453  decode.acc_seg: 96.3033  aux.loss_ce: 0.0191  aux.acc_seg: 96.0765
2023/06/15 16:02:35 - mmengine - INFO - Iter(train) [2600/2800]  lr: 9.4191e-03  eta: 0:00:18  time: 0.0944  data_time: 0.0098  memory: 1799  loss: 0.0561  decode.loss_ce: 0.0407  decode.acc_seg: 100.0000  aux.loss_ce: 0.0154  aux.acc_seg: 100.0000
2023/06/15 16:02:45 - mmengine - INFO - Iter(train) [2700/2800]  lr: 9.3967e-03  eta: 0:00:09  time: 0.0945  data_time: 0.0058  memory: 1799  loss: 0.0697  decode.loss_ce: 0.0480  decode.acc_seg: 100.0000  aux.loss_ce: 0.0216  aux.acc_seg: 100.0000
2023/06/15 16:02:54 - mmengine - INFO - Iter(train) [2800/2800]  lr: 9.3743e-03  eta: 0:00:00  time: 0.0968  data_time: 0.0112  memory: 1799  loss: 0.0769  decode.loss_ce: 0.0549  decode.acc_seg: 98.3276  aux.loss_ce: 0.0220  aux.acc_seg: 98.7467
2023/06/15 16:02:54 - mmengine - INFO - Saving checkpoint at 2800 iterations
2023/06/15 16:02:59 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0363  data_time: 0.0023  memory: 1186  
2023/06/15 16:03:03 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0368  data_time: 0.0024  memory: 1186  
2023/06/15 16:03:06 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0354  data_time: 0.0024  memory: 1186  
2023/06/15 16:03:10 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0351  data_time: 0.0022  memory: 1186  
2023/06/15 16:03:14 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0362  data_time: 0.0022  memory: 1186  
2023/06/15 16:03:14 - mmengine - INFO - per class results:
2023/06/15 16:03:14 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.11 |  99.7 |
| glomeruili | 59.95 | 69.11 |
+------------+-------+-------+
2023/06/15 16:03:14 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.1200  mIoU: 79.5300  mAcc: 84.4100  data_time: 0.0023  time: 0.0359
