2023/06/15 16:12:46 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 42
    GPU 0: NVIDIA GeForce GTX 1080 Ti
    CUDA_HOME: /usr/local/cuda-11.6
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0
    PyTorch: 1.10.1+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.2+cu113
    OpenCV: 4.7.0
    MMEngine: 0.7.1

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 42
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/15 16:12:46 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(512, 1024))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(128, 96)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=2,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'StanfordBackgroundDataset'
data_root = 'Glomeruli-dataset'
crop_size = (128, 96)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(320, 240),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(128, 96), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(320, 240), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(320, 240),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(128, 96), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/train.txt'))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='StanfordBackgroundDataset',
        data_root='Glomeruli-dataset',
        data_prefix=dict(img_path='images', seg_map_path='masks'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(320, 240), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ],
        ann_file='splits/val.txt'))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = 'pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth'
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.002, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=4000, val_interval=400)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook',
        by_epoch=False,
        interval=400,
        max_keep_ckpts=2,
        save_best='auto'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs/tutorial'
randomness = dict(seed=42)

2023/06/15 16:12:47 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/15 16:12:47 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/15 16:12:53 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/15 16:12:53 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/15 16:12:53 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/15 16:12:53 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([2, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([2, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/15 16:12:54 - mmengine - INFO - Load checkpoint from pspnet_r50-d8_512x1024_40k_cityscapes_20200605_003338-2966598c.pth
2023/06/15 16:12:54 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/15 16:12:54 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/15 16:12:54 - mmengine - INFO - Checkpoints will be saved to /home/cine/Documents/GitHub/mmsegmentation/work_dirs/tutorial.
2023/06/15 16:13:05 - mmengine - INFO - Iter(train) [ 100/4000]  lr: 1.9958e-03  eta: 0:07:24  time: 0.1051  data_time: 0.0203  memory: 5285  loss: 0.1549  decode.loss_ce: 0.1012  decode.acc_seg: 100.0000  aux.loss_ce: 0.0537  aux.acc_seg: 100.0000
2023/06/15 16:13:16 - mmengine - INFO - Iter(train) [ 200/4000]  lr: 1.9915e-03  eta: 0:06:59  time: 0.1005  data_time: 0.0147  memory: 1424  loss: 0.0991  decode.loss_ce: 0.0663  decode.acc_seg: 100.0000  aux.loss_ce: 0.0329  aux.acc_seg: 100.0000
2023/06/15 16:13:22 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230615_161246
2023/06/15 16:13:27 - mmengine - INFO - Iter(train) [ 300/4000]  lr: 1.9872e-03  eta: 0:06:45  time: 0.0996  data_time: 0.0110  memory: 1424  loss: 0.1042  decode.loss_ce: 0.0712  decode.acc_seg: 96.7845  aux.loss_ce: 0.0330  aux.acc_seg: 96.7845
2023/06/15 16:13:36 - mmengine - INFO - Iter(train) [ 400/4000]  lr: 1.9829e-03  eta: 0:06:20  time: 0.0906  data_time: 0.0051  memory: 1424  loss: 0.0732  decode.loss_ce: 0.0509  decode.acc_seg: 100.0000  aux.loss_ce: 0.0223  aux.acc_seg: 100.0000
2023/06/15 16:13:36 - mmengine - INFO - Saving checkpoint at 400 iterations
2023/06/15 16:13:43 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:18  time: 0.0359  data_time: 0.0021  memory: 4954  
2023/06/15 16:13:46 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:12  time: 0.0364  data_time: 0.0022  memory: 813  
2023/06/15 16:13:50 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:08  time: 0.0361  data_time: 0.0023  memory: 813  
2023/06/15 16:13:53 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0355  data_time: 0.0023  memory: 813  
2023/06/15 16:13:57 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0359  data_time: 0.0022  memory: 813  
2023/06/15 16:13:57 - mmengine - INFO - per class results:
2023/06/15 16:13:57 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 98.13 | 100.0 |
| glomeruili |  1.71 |  1.72 |
+------------+-------+-------+
2023/06/15 16:13:57 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.1300  mIoU: 49.9200  mAcc: 50.8600  data_time: 0.0022  time: 0.0355
2023/06/15 16:13:58 - mmengine - INFO - The best checkpoint with 98.1300 aAcc at 400 iter is saved to best_aAcc_iter_400.pth.
2023/06/15 16:14:09 - mmengine - INFO - Iter(train) [ 500/4000]  lr: 1.9787e-03  eta: 0:06:17  time: 0.1071  data_time: 0.0212  memory: 1424  loss: 0.1343  decode.loss_ce: 0.0951  decode.acc_seg: 94.3842  aux.loss_ce: 0.0392  aux.acc_seg: 93.0556
2023/06/15 16:14:19 - mmengine - INFO - Iter(train) [ 600/4000]  lr: 1.9744e-03  eta: 0:06:01  time: 0.0975  data_time: 0.0107  memory: 1424  loss: 0.0737  decode.loss_ce: 0.0507  decode.acc_seg: 99.6531  aux.loss_ce: 0.0231  aux.acc_seg: 99.6195
2023/06/15 16:14:29 - mmengine - INFO - Iter(train) [ 700/4000]  lr: 1.9701e-03  eta: 0:05:47  time: 0.0992  data_time: 0.0114  memory: 1424  loss: 0.0742  decode.loss_ce: 0.0509  decode.acc_seg: 95.1691  aux.loss_ce: 0.0232  aux.acc_seg: 94.9544
2023/06/15 16:14:39 - mmengine - INFO - Iter(train) [ 800/4000]  lr: 1.9658e-03  eta: 0:05:33  time: 0.0911  data_time: 0.0050  memory: 1424  loss: 0.1478  decode.loss_ce: 0.1061  decode.acc_seg: 98.4385  aux.loss_ce: 0.0417  aux.acc_seg: 97.9502
2023/06/15 16:14:39 - mmengine - INFO - Saving checkpoint at 800 iterations
2023/06/15 16:14:44 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0363  data_time: 0.0023  memory: 813  
2023/06/15 16:14:48 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0361  data_time: 0.0021  memory: 813  
2023/06/15 16:14:52 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0352  data_time: 0.0022  memory: 813  
2023/06/15 16:14:55 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0355  data_time: 0.0022  memory: 813  
2023/06/15 16:14:59 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0363  data_time: 0.0022  memory: 813  
2023/06/15 16:14:59 - mmengine - INFO - per class results:
2023/06/15 16:14:59 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.04 | 99.92 |
| glomeruili | 51.78 | 53.78 |
+------------+-------+-------+
2023/06/15 16:14:59 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.0500  mIoU: 75.4100  mAcc: 76.8500  data_time: 0.0021  time: 0.0353
2023/06/15 16:14:59 - mmengine - INFO - The previous best checkpoint /home/cine/Documents/GitHub/mmsegmentation/work_dirs/tutorial/best_aAcc_iter_400.pth is removed
2023/06/15 16:15:00 - mmengine - INFO - The best checkpoint with 99.0500 aAcc at 800 iter is saved to best_aAcc_iter_800.pth.
2023/06/15 16:15:10 - mmengine - INFO - Iter(train) [ 900/4000]  lr: 1.9615e-03  eta: 0:05:22  time: 0.0963  data_time: 0.0107  memory: 1424  loss: 0.1194  decode.loss_ce: 0.0809  decode.acc_seg: 100.0000  aux.loss_ce: 0.0385  aux.acc_seg: 100.0000
2023/06/15 16:15:19 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230615_161246
2023/06/15 16:15:19 - mmengine - INFO - Iter(train) [1000/4000]  lr: 1.9572e-03  eta: 0:05:10  time: 0.0920  data_time: 0.0055  memory: 1424  loss: 0.0650  decode.loss_ce: 0.0454  decode.acc_seg: 99.2432  aux.loss_ce: 0.0196  aux.acc_seg: 99.4141
2023/06/15 16:15:29 - mmengine - INFO - Iter(train) [1100/4000]  lr: 1.9530e-03  eta: 0:04:57  time: 0.0914  data_time: 0.0050  memory: 1424  loss: 0.0477  decode.loss_ce: 0.0331  decode.acc_seg: 99.1180  aux.loss_ce: 0.0146  aux.acc_seg: 99.4344
2023/06/15 16:15:38 - mmengine - INFO - Iter(train) [1200/4000]  lr: 1.9487e-03  eta: 0:04:45  time: 0.0908  data_time: 0.0050  memory: 1424  loss: 0.0580  decode.loss_ce: 0.0407  decode.acc_seg: 98.9807  aux.loss_ce: 0.0173  aux.acc_seg: 99.2543
2023/06/15 16:15:38 - mmengine - INFO - Saving checkpoint at 1200 iterations
2023/06/15 16:15:44 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0364  data_time: 0.0023  memory: 813  
2023/06/15 16:15:48 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0365  data_time: 0.0024  memory: 813  
2023/06/15 16:15:51 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0352  data_time: 0.0021  memory: 813  
2023/06/15 16:15:55 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0358  data_time: 0.0024  memory: 813  
2023/06/15 16:15:58 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0366  data_time: 0.0023  memory: 813  
2023/06/15 16:15:59 - mmengine - INFO - per class results:
2023/06/15 16:15:59 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.29 | 99.86 |
| glomeruili | 65.64 | 70.25 |
+------------+-------+-------+
2023/06/15 16:15:59 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.3000  mIoU: 82.4600  mAcc: 85.0600  data_time: 0.0021  time: 0.0358
2023/06/15 16:15:59 - mmengine - INFO - The previous best checkpoint /home/cine/Documents/GitHub/mmsegmentation/work_dirs/tutorial/best_aAcc_iter_800.pth is removed
2023/06/15 16:16:00 - mmengine - INFO - The best checkpoint with 99.3000 aAcc at 1200 iter is saved to best_aAcc_iter_1200.pth.
2023/06/15 16:16:09 - mmengine - INFO - Iter(train) [1300/4000]  lr: 1.9444e-03  eta: 0:04:36  time: 0.0982  data_time: 0.0072  memory: 1424  loss: 0.1404  decode.loss_ce: 0.0992  decode.acc_seg: 95.9598  aux.loss_ce: 0.0412  aux.acc_seg: 98.6023
2023/06/15 16:16:20 - mmengine - INFO - Iter(train) [1400/4000]  lr: 1.9401e-03  eta: 0:04:26  time: 0.0976  data_time: 0.0104  memory: 1424  loss: 0.0869  decode.loss_ce: 0.0604  decode.acc_seg: 99.1811  aux.loss_ce: 0.0265  aux.acc_seg: 99.2503
2023/06/15 16:16:30 - mmengine - INFO - Iter(train) [1500/4000]  lr: 1.9358e-03  eta: 0:04:16  time: 0.1035  data_time: 0.0060  memory: 1424  loss: 0.0600  decode.loss_ce: 0.0416  decode.acc_seg: 100.0000  aux.loss_ce: 0.0184  aux.acc_seg: 100.0000
2023/06/15 16:16:40 - mmengine - INFO - Iter(train) [1600/4000]  lr: 1.9315e-03  eta: 0:04:05  time: 0.1014  data_time: 0.0128  memory: 1424  loss: 0.0428  decode.loss_ce: 0.0299  decode.acc_seg: 94.5302  aux.loss_ce: 0.0129  aux.acc_seg: 99.3093
2023/06/15 16:16:40 - mmengine - INFO - Saving checkpoint at 1600 iterations
2023/06/15 16:16:46 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0364  data_time: 0.0023  memory: 813  
2023/06/15 16:16:50 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0367  data_time: 0.0024  memory: 813  
2023/06/15 16:16:53 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0370  data_time: 0.0027  memory: 813  
2023/06/15 16:16:57 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0357  data_time: 0.0023  memory: 813  
2023/06/15 16:17:01 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0364  data_time: 0.0022  memory: 813  
2023/06/15 16:17:01 - mmengine - INFO - per class results:
2023/06/15 16:17:01 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.29 | 99.68 |
| glomeruili | 68.53 | 79.92 |
+------------+-------+-------+
2023/06/15 16:17:01 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.3000  mIoU: 83.9100  mAcc: 89.8000  data_time: 0.0022  time: 0.0357
2023/06/15 16:17:11 - mmengine - INFO - Iter(train) [1700/4000]  lr: 1.9272e-03  eta: 0:03:55  time: 0.0985  data_time: 0.0107  memory: 1424  loss: 0.0452  decode.loss_ce: 0.0282  decode.acc_seg: 100.0000  aux.loss_ce: 0.0170  aux.acc_seg: 100.0000
2023/06/15 16:17:22 - mmengine - INFO - Iter(train) [1800/4000]  lr: 1.9229e-03  eta: 0:03:45  time: 0.1043  data_time: 0.0078  memory: 1424  loss: 0.0784  decode.loss_ce: 0.0570  decode.acc_seg: 97.2941  aux.loss_ce: 0.0214  aux.acc_seg: 98.6521
2023/06/15 16:17:32 - mmengine - INFO - Iter(train) [1900/4000]  lr: 1.9186e-03  eta: 0:03:35  time: 0.0949  data_time: 0.0053  memory: 1424  loss: 0.0469  decode.loss_ce: 0.0311  decode.acc_seg: 100.0000  aux.loss_ce: 0.0159  aux.acc_seg: 100.0000
2023/06/15 16:17:42 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230615_161246
2023/06/15 16:17:42 - mmengine - INFO - Iter(train) [2000/4000]  lr: 1.9143e-03  eta: 0:03:24  time: 0.0922  data_time: 0.0047  memory: 1424  loss: 0.0533  decode.loss_ce: 0.0368  decode.acc_seg: 99.7721  aux.loss_ce: 0.0165  aux.acc_seg: 99.6277
2023/06/15 16:17:42 - mmengine - INFO - Saving checkpoint at 2000 iterations
2023/06/15 16:17:47 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0360  data_time: 0.0022  memory: 813  
2023/06/15 16:17:51 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0363  data_time: 0.0024  memory: 813  
2023/06/15 16:17:54 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0353  data_time: 0.0022  memory: 813  
2023/06/15 16:17:58 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0359  data_time: 0.0024  memory: 813  
2023/06/15 16:18:02 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0362  data_time: 0.0023  memory: 813  
2023/06/15 16:18:02 - mmengine - INFO - per class results:
2023/06/15 16:18:02 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.41 | 99.82 |
| glomeruili | 72.18 | 78.86 |
+------------+-------+-------+
2023/06/15 16:18:02 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.4200  mIoU: 85.8000  mAcc: 89.3400  data_time: 0.0022  time: 0.0360
2023/06/15 16:18:02 - mmengine - INFO - The previous best checkpoint /home/cine/Documents/GitHub/mmsegmentation/work_dirs/tutorial/best_aAcc_iter_1200.pth is removed
2023/06/15 16:18:03 - mmengine - INFO - The best checkpoint with 99.4200 aAcc at 2000 iter is saved to best_aAcc_iter_2000.pth.
2023/06/15 16:18:13 - mmengine - INFO - Iter(train) [2100/4000]  lr: 1.9100e-03  eta: 0:03:14  time: 0.0941  data_time: 0.0063  memory: 1424  loss: 0.0561  decode.loss_ce: 0.0395  decode.acc_seg: 96.3792  aux.loss_ce: 0.0165  aux.acc_seg: 96.3404
2023/06/15 16:18:22 - mmengine - INFO - Iter(train) [2200/4000]  lr: 1.9057e-03  eta: 0:03:03  time: 0.0919  data_time: 0.0053  memory: 1424  loss: 0.0401  decode.loss_ce: 0.0270  decode.acc_seg: 98.8790  aux.loss_ce: 0.0132  aux.acc_seg: 98.1384
2023/06/15 16:18:33 - mmengine - INFO - Iter(train) [2300/4000]  lr: 1.9014e-03  eta: 0:02:53  time: 0.0934  data_time: 0.0058  memory: 1424  loss: 0.0428  decode.loss_ce: 0.0289  decode.acc_seg: 100.0000  aux.loss_ce: 0.0139  aux.acc_seg: 100.0000
2023/06/15 16:18:42 - mmengine - INFO - Iter(train) [2400/4000]  lr: 1.8971e-03  eta: 0:02:43  time: 0.0935  data_time: 0.0073  memory: 1424  loss: 0.0507  decode.loss_ce: 0.0335  decode.acc_seg: 100.0000  aux.loss_ce: 0.0173  aux.acc_seg: 100.0000
2023/06/15 16:18:42 - mmengine - INFO - Saving checkpoint at 2400 iterations
2023/06/15 16:18:47 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0365  data_time: 0.0023  memory: 813  
2023/06/15 16:18:51 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0363  data_time: 0.0023  memory: 813  
2023/06/15 16:18:55 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0351  data_time: 0.0023  memory: 813  
2023/06/15 16:18:58 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0361  data_time: 0.0026  memory: 813  
2023/06/15 16:19:02 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0363  data_time: 0.0024  memory: 813  
2023/06/15 16:19:02 - mmengine - INFO - per class results:
2023/06/15 16:19:02 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 98.33 | 98.52 |
| glomeruili | 50.92 | 89.71 |
+------------+-------+-------+
2023/06/15 16:19:02 - mmengine - INFO - Iter(val) [515/515]  aAcc: 98.3600  mIoU: 74.6300  mAcc: 94.1200  data_time: 0.0024  time: 0.0375
2023/06/15 16:19:12 - mmengine - INFO - Iter(train) [2500/4000]  lr: 1.8928e-03  eta: 0:02:32  time: 0.0949  data_time: 0.0078  memory: 1424  loss: 0.0366  decode.loss_ce: 0.0251  decode.acc_seg: 96.2351  aux.loss_ce: 0.0115  aux.acc_seg: 96.0632
2023/06/15 16:19:22 - mmengine - INFO - Iter(train) [2600/4000]  lr: 1.8885e-03  eta: 0:02:22  time: 0.0974  data_time: 0.0097  memory: 1424  loss: 0.0281  decode.loss_ce: 0.0200  decode.acc_seg: 100.0000  aux.loss_ce: 0.0082  aux.acc_seg: 100.0000
2023/06/15 16:19:32 - mmengine - INFO - Iter(train) [2700/4000]  lr: 1.8842e-03  eta: 0:02:12  time: 0.0940  data_time: 0.0059  memory: 1424  loss: 0.0530  decode.loss_ce: 0.0383  decode.acc_seg: 99.7731  aux.loss_ce: 0.0147  aux.acc_seg: 100.0000
2023/06/15 16:19:42 - mmengine - INFO - Iter(train) [2800/4000]  lr: 1.8799e-03  eta: 0:02:01  time: 0.1031  data_time: 0.0081  memory: 1424  loss: 0.0610  decode.loss_ce: 0.0441  decode.acc_seg: 98.1313  aux.loss_ce: 0.0168  aux.acc_seg: 98.2045
2023/06/15 16:19:42 - mmengine - INFO - Saving checkpoint at 2800 iterations
2023/06/15 16:19:48 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0362  data_time: 0.0024  memory: 813  
2023/06/15 16:19:51 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0361  data_time: 0.0022  memory: 813  
2023/06/15 16:19:55 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0354  data_time: 0.0023  memory: 813  
2023/06/15 16:19:59 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0352  data_time: 0.0021  memory: 813  
2023/06/15 16:20:02 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0363  data_time: 0.0022  memory: 813  
2023/06/15 16:20:03 - mmengine - INFO - per class results:
2023/06/15 16:20:03 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.37 | 99.75 |
| glomeruili | 71.21 | 80.39 |
+------------+-------+-------+
2023/06/15 16:20:03 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.3800  mIoU: 85.2900  mAcc: 90.0700  data_time: 0.0023  time: 0.0372
2023/06/15 16:20:13 - mmengine - INFO - Iter(train) [2900/4000]  lr: 1.8756e-03  eta: 0:01:51  time: 0.1128  data_time: 0.0250  memory: 1424  loss: 0.0408  decode.loss_ce: 0.0294  decode.acc_seg: 98.4324  aux.loss_ce: 0.0114  aux.acc_seg: 99.3367
2023/06/15 16:20:23 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230615_161246
2023/06/15 16:20:23 - mmengine - INFO - Iter(train) [3000/4000]  lr: 1.8713e-03  eta: 0:01:41  time: 0.1018  data_time: 0.0157  memory: 1424  loss: 0.0562  decode.loss_ce: 0.0412  decode.acc_seg: 99.1180  aux.loss_ce: 0.0150  aux.acc_seg: 99.2198
2023/06/15 16:20:33 - mmengine - INFO - Iter(train) [3100/4000]  lr: 1.8670e-03  eta: 0:01:31  time: 0.0924  data_time: 0.0057  memory: 1424  loss: 0.0439  decode.loss_ce: 0.0303  decode.acc_seg: 99.5766  aux.loss_ce: 0.0135  aux.acc_seg: 99.5766
2023/06/15 16:20:42 - mmengine - INFO - Iter(train) [3200/4000]  lr: 1.8627e-03  eta: 0:01:20  time: 0.0930  data_time: 0.0051  memory: 1424  loss: 0.0352  decode.loss_ce: 0.0248  decode.acc_seg: 99.4202  aux.loss_ce: 0.0104  aux.acc_seg: 99.1648
2023/06/15 16:20:42 - mmengine - INFO - Saving checkpoint at 3200 iterations
2023/06/15 16:20:48 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0360  data_time: 0.0023  memory: 813  
2023/06/15 16:20:51 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0364  data_time: 0.0023  memory: 813  
2023/06/15 16:20:55 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0349  data_time: 0.0021  memory: 813  
2023/06/15 16:20:58 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0349  data_time: 0.0021  memory: 813  
2023/06/15 16:21:02 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0363  data_time: 0.0022  memory: 813  
2023/06/15 16:21:02 - mmengine - INFO - per class results:
2023/06/15 16:21:02 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.44 | 99.86 |
| glomeruili | 72.99 | 78.34 |
+------------+-------+-------+
2023/06/15 16:21:02 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.4500  mIoU: 86.2200  mAcc: 89.1000  data_time: 0.0022  time: 0.0357
2023/06/15 16:21:02 - mmengine - INFO - The previous best checkpoint /home/cine/Documents/GitHub/mmsegmentation/work_dirs/tutorial/best_aAcc_iter_2000.pth is removed
2023/06/15 16:21:03 - mmengine - INFO - The best checkpoint with 99.4500 aAcc at 3200 iter is saved to best_aAcc_iter_3200.pth.
2023/06/15 16:21:14 - mmengine - INFO - Iter(train) [3300/4000]  lr: 1.8584e-03  eta: 0:01:11  time: 0.1222  data_time: 0.0367  memory: 1424  loss: 0.0373  decode.loss_ce: 0.0239  decode.acc_seg: 99.7526  aux.loss_ce: 0.0134  aux.acc_seg: 99.5611
2023/06/15 16:21:24 - mmengine - INFO - Iter(train) [3400/4000]  lr: 1.8541e-03  eta: 0:01:00  time: 0.1000  data_time: 0.0051  memory: 1424  loss: 0.0526  decode.loss_ce: 0.0358  decode.acc_seg: 100.0000  aux.loss_ce: 0.0167  aux.acc_seg: 100.0000
2023/06/15 16:21:33 - mmengine - INFO - Iter(train) [3500/4000]  lr: 1.8497e-03  eta: 0:00:50  time: 0.0936  data_time: 0.0074  memory: 1424  loss: 0.0417  decode.loss_ce: 0.0289  decode.acc_seg: 95.4234  aux.loss_ce: 0.0128  aux.acc_seg: 95.7092
2023/06/15 16:21:43 - mmengine - INFO - Iter(train) [3600/4000]  lr: 1.8454e-03  eta: 0:00:40  time: 0.0939  data_time: 0.0066  memory: 1424  loss: 0.0766  decode.loss_ce: 0.0540  decode.acc_seg: 95.7072  aux.loss_ce: 0.0226  aux.acc_seg: 95.4041
2023/06/15 16:21:43 - mmengine - INFO - Saving checkpoint at 3600 iterations
2023/06/15 16:21:48 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0364  data_time: 0.0025  memory: 813  
2023/06/15 16:21:51 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0365  data_time: 0.0023  memory: 813  
2023/06/15 16:21:55 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0365  data_time: 0.0023  memory: 813  
2023/06/15 16:21:59 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0354  data_time: 0.0022  memory: 813  
2023/06/15 16:22:02 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0363  data_time: 0.0022  memory: 813  
2023/06/15 16:22:03 - mmengine - INFO - per class results:
2023/06/15 16:22:03 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.55 | 99.82 |
| glomeruili | 78.73 | 86.12 |
+------------+-------+-------+
2023/06/15 16:22:03 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.5600  mIoU: 89.1400  mAcc: 92.9700  data_time: 0.0024  time: 0.0364
2023/06/15 16:22:03 - mmengine - INFO - The previous best checkpoint /home/cine/Documents/GitHub/mmsegmentation/work_dirs/tutorial/best_aAcc_iter_3200.pth is removed
2023/06/15 16:22:04 - mmengine - INFO - The best checkpoint with 99.5600 aAcc at 3600 iter is saved to best_aAcc_iter_3600.pth.
2023/06/15 16:22:14 - mmengine - INFO - Iter(train) [3700/4000]  lr: 1.8411e-03  eta: 0:00:30  time: 0.1103  data_time: 0.0247  memory: 1424  loss: 0.0176  decode.loss_ce: 0.0120  decode.acc_seg: 100.0000  aux.loss_ce: 0.0055  aux.acc_seg: 100.0000
2023/06/15 16:22:24 - mmengine - INFO - Iter(train) [3800/4000]  lr: 1.8368e-03  eta: 0:00:20  time: 0.1095  data_time: 0.0145  memory: 1424  loss: 0.0332  decode.loss_ce: 0.0222  decode.acc_seg: 99.5646  aux.loss_ce: 0.0110  aux.acc_seg: 99.4375
2023/06/15 16:22:34 - mmengine - INFO - Iter(train) [3900/4000]  lr: 1.8325e-03  eta: 0:00:10  time: 0.0975  data_time: 0.0112  memory: 1424  loss: 0.0449  decode.loss_ce: 0.0313  decode.acc_seg: 99.8442  aux.loss_ce: 0.0136  aux.acc_seg: 99.8052
2023/06/15 16:22:44 - mmengine - INFO - Exp name: pspnet_r50-d8_4xb2-40k_cityscapes-512x1024_20230615_161246
2023/06/15 16:22:44 - mmengine - INFO - Iter(train) [4000/4000]  lr: 1.8282e-03  eta: 0:00:00  time: 0.0921  data_time: 0.0049  memory: 1424  loss: 0.0511  decode.loss_ce: 0.0373  decode.acc_seg: 99.5168  aux.loss_ce: 0.0138  aux.acc_seg: 99.4751
2023/06/15 16:22:44 - mmengine - INFO - Saving checkpoint at 4000 iterations
2023/06/15 16:22:49 - mmengine - INFO - Iter(val) [100/515]    eta: 0:00:15  time: 0.0358  data_time: 0.0023  memory: 813  
2023/06/15 16:22:52 - mmengine - INFO - Iter(val) [200/515]    eta: 0:00:11  time: 0.0363  data_time: 0.0022  memory: 813  
2023/06/15 16:22:56 - mmengine - INFO - Iter(val) [300/515]    eta: 0:00:07  time: 0.0351  data_time: 0.0023  memory: 813  
2023/06/15 16:22:59 - mmengine - INFO - Iter(val) [400/515]    eta: 0:00:04  time: 0.0374  data_time: 0.0024  memory: 813  
2023/06/15 16:23:03 - mmengine - INFO - Iter(val) [500/515]    eta: 0:00:00  time: 0.0361  data_time: 0.0022  memory: 813  
2023/06/15 16:23:04 - mmengine - INFO - per class results:
2023/06/15 16:23:04 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
| background | 99.28 | 99.42 |
| glomeruili | 71.31 | 92.59 |
+------------+-------+-------+
2023/06/15 16:23:04 - mmengine - INFO - Iter(val) [515/515]  aAcc: 99.2900  mIoU: 85.2900  mAcc: 96.0000  data_time: 0.0022  time: 0.0358
