2023/06/15 11:58:44 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.16 (default, Mar  2 2023, 03:21:46) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 42
    GPU 0: NVIDIA GeForce GTX 1080 Ti
    CUDA_HOME: /usr/local/cuda-11.6
    NVCC: Cuda compilation tools, release 11.6, V11.6.124
    GCC: gcc (Ubuntu 11.3.0-1ubuntu1~22.04.1) 11.3.0
    PyTorch: 1.10.1+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.2+cu113
    OpenCV: 4.7.0
    MMEngine: 0.7.1

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 42
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/15 11:58:44 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(64, 64))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(256, 256)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'DubaiDataset'
data_root = 'Dubai-dataset/'
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=12,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='DubaiDataset',
        data_root='Dubai-dataset/',
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='DubaiDataset',
        data_root='Dubai-dataset/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='DubaiDataset',
        data_root='Dubai-dataset/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = None
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.001, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=8000, val_interval=400)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=1000),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs/DubaiDataset'
randomness = dict(seed=42)

2023/06/15 11:58:47 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/15 11:58:47 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/15 11:58:58 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/15 11:58:59 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/15 11:58:59 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/15 11:58:59 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([6, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([6, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/15 11:58:59 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/15 11:58:59 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/15 11:58:59 - mmengine - INFO - Checkpoints will be saved to /home/cine/Documents/GitHub/mmsegmentation/work_dirs/DubaiDataset.
2023/06/15 11:59:04 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230615-3_crop_size_20230615_115844
2023/06/15 11:59:45 - mmengine - INFO - Iter(train) [ 100/8000]  lr: 9.9799e-04  eta: 1:01:28  time: 0.4397  data_time: 0.0069  memory: 6650  loss: 1.8282  decode.loss_ce: 1.2559  decode.acc_seg: 51.6235  aux.loss_ce: 0.5722  aux.acc_seg: 48.4428
2023/06/15 12:00:30 - mmengine - INFO - Iter(train) [ 200/8000]  lr: 9.9597e-04  eta: 0:59:12  time: 0.4540  data_time: 0.0070  memory: 4911  loss: 1.5247  decode.loss_ce: 1.0149  decode.acc_seg: 65.9932  aux.loss_ce: 0.5097  aux.acc_seg: 60.0674
2023/06/15 12:01:15 - mmengine - INFO - Iter(train) [ 300/8000]  lr: 9.9394e-04  eta: 0:58:28  time: 0.4659  data_time: 0.0077  memory: 4911  loss: 1.3549  decode.loss_ce: 0.8980  decode.acc_seg: 80.7594  aux.loss_ce: 0.4569  aux.acc_seg: 68.0129
2023/06/15 12:02:01 - mmengine - INFO - Iter(train) [ 400/8000]  lr: 9.9192e-04  eta: 0:57:38  time: 0.4504  data_time: 0.0069  memory: 4911  loss: 1.2438  decode.loss_ce: 0.8236  decode.acc_seg: 69.1939  aux.loss_ce: 0.4202  aux.acc_seg: 57.9829
2023/06/15 12:02:13 - mmengine - INFO - per class results:
2023/06/15 12:02:13 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 68.94 | 87.06 |
|    Road    | 26.48 | 30.65 |
|  Building  | 46.09 | 62.64 |
| Vegetation | 43.69 | 58.13 |
|   Water    |  86.0 | 96.25 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/15 12:02:13 - mmengine - INFO - Iter(val) [15/15]  aAcc: 74.6300  mIoU: 45.2000  mAcc: 55.7900  data_time: 0.0044  time: 0.5328
2023/06/15 12:02:58 - mmengine - INFO - Iter(train) [ 500/8000]  lr: 9.8989e-04  eta: 0:56:47  time: 0.4521  data_time: 0.0074  memory: 4911  loss: 1.1493  decode.loss_ce: 0.7588  decode.acc_seg: 76.4304  aux.loss_ce: 0.3905  aux.acc_seg: 64.6894
2023/06/15 12:03:44 - mmengine - INFO - Iter(train) [ 600/8000]  lr: 9.8786e-04  eta: 0:55:59  time: 0.4488  data_time: 0.0070  memory: 4911  loss: 1.0555  decode.loss_ce: 0.7018  decode.acc_seg: 71.3086  aux.loss_ce: 0.3537  aux.acc_seg: 62.5893
2023/06/15 12:04:29 - mmengine - INFO - Iter(train) [ 700/8000]  lr: 9.8583e-04  eta: 0:55:14  time: 0.4512  data_time: 0.0069  memory: 4911  loss: 0.9530  decode.loss_ce: 0.6327  decode.acc_seg: 76.4256  aux.loss_ce: 0.3203  aux.acc_seg: 70.9724
2023/06/15 12:05:14 - mmengine - INFO - Iter(train) [ 800/8000]  lr: 9.8380e-04  eta: 0:54:26  time: 0.4493  data_time: 0.0069  memory: 4911  loss: 0.9854  decode.loss_ce: 0.6585  decode.acc_seg: 75.8816  aux.loss_ce: 0.3269  aux.acc_seg: 74.0000
2023/06/15 12:05:18 - mmengine - INFO - per class results:
2023/06/15 12:05:18 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 70.25 | 82.64 |
|    Road    | 37.39 | 49.46 |
|  Building  |  53.7 | 72.06 |
| Vegetation | 46.35 |  67.7 |
|   Water    | 87.31 | 95.21 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/15 12:05:18 - mmengine - INFO - Iter(val) [15/15]  aAcc: 76.6200  mIoU: 49.1700  mAcc: 61.1800  data_time: 0.0041  time: 0.2862
2023/06/15 12:06:03 - mmengine - INFO - Iter(train) [ 900/8000]  lr: 9.8177e-04  eta: 0:53:39  time: 0.4530  data_time: 0.0071  memory: 4911  loss: 1.0205  decode.loss_ce: 0.6822  decode.acc_seg: 79.4512  aux.loss_ce: 0.3383  aux.acc_seg: 73.0782
2023/06/15 12:06:48 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230615-3_crop_size_20230615_115844
2023/06/15 12:06:48 - mmengine - INFO - Iter(train) [1000/8000]  lr: 9.7974e-04  eta: 0:52:51  time: 0.4489  data_time: 0.0072  memory: 4911  loss: 0.9169  decode.loss_ce: 0.6133  decode.acc_seg: 76.7755  aux.loss_ce: 0.3036  aux.acc_seg: 70.6721
2023/06/15 12:06:48 - mmengine - INFO - Saving checkpoint at 1000 iterations
2023/06/15 12:07:36 - mmengine - INFO - Iter(train) [1100/8000]  lr: 9.7771e-04  eta: 0:52:18  time: 0.4557  data_time: 0.0068  memory: 4911  loss: 0.8672  decode.loss_ce: 0.5741  decode.acc_seg: 79.8768  aux.loss_ce: 0.2931  aux.acc_seg: 73.8347
2023/06/15 12:08:21 - mmengine - INFO - Iter(train) [1200/8000]  lr: 9.7568e-04  eta: 0:51:34  time: 0.4614  data_time: 0.0070  memory: 4911  loss: 0.9104  decode.loss_ce: 0.6082  decode.acc_seg: 77.0192  aux.loss_ce: 0.3022  aux.acc_seg: 76.5023
2023/06/15 12:08:25 - mmengine - INFO - per class results:
2023/06/15 12:08:25 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 72.19 | 82.47 |
|    Road    | 41.58 | 58.01 |
|  Building  | 57.87 | 78.38 |
| Vegetation | 52.25 | 68.97 |
|   Water    | 87.92 | 96.14 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/15 12:08:25 - mmengine - INFO - Iter(val) [15/15]  aAcc: 78.6600  mIoU: 51.9700  mAcc: 64.0000  data_time: 0.0039  time: 0.2751
2023/06/15 12:09:10 - mmengine - INFO - Iter(train) [1300/8000]  lr: 9.7365e-04  eta: 0:50:46  time: 0.4484  data_time: 0.0072  memory: 4911  loss: 0.8632  decode.loss_ce: 0.5815  decode.acc_seg: 78.3270  aux.loss_ce: 0.2817  aux.acc_seg: 70.6460
2023/06/15 12:09:55 - mmengine - INFO - Iter(train) [1400/8000]  lr: 9.7162e-04  eta: 0:49:59  time: 0.4500  data_time: 0.0072  memory: 4911  loss: 0.8293  decode.loss_ce: 0.5574  decode.acc_seg: 80.5561  aux.loss_ce: 0.2719  aux.acc_seg: 76.8675
2023/06/15 12:10:40 - mmengine - INFO - Iter(train) [1500/8000]  lr: 9.6959e-04  eta: 0:49:12  time: 0.4523  data_time: 0.0071  memory: 4911  loss: 0.8094  decode.loss_ce: 0.5450  decode.acc_seg: 79.9159  aux.loss_ce: 0.2644  aux.acc_seg: 75.0755
2023/06/15 12:11:25 - mmengine - INFO - Iter(train) [1600/8000]  lr: 9.6755e-04  eta: 0:48:24  time: 0.4485  data_time: 0.0073  memory: 4911  loss: 0.7936  decode.loss_ce: 0.5282  decode.acc_seg: 81.5956  aux.loss_ce: 0.2653  aux.acc_seg: 80.7836
2023/06/15 12:11:29 - mmengine - INFO - per class results:
2023/06/15 12:11:29 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 73.21 | 82.04 |
|    Road    | 45.16 | 63.76 |
|  Building  | 58.93 | 76.58 |
| Vegetation | 52.35 | 75.47 |
|   Water    | 89.06 | 95.97 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/15 12:11:29 - mmengine - INFO - Iter(val) [15/15]  aAcc: 79.4500  mIoU: 53.1200  mAcc: 65.6400  data_time: 0.0039  time: 0.2769
2023/06/15 12:12:14 - mmengine - INFO - Iter(train) [1700/8000]  lr: 9.6552e-04  eta: 0:47:37  time: 0.4509  data_time: 0.0072  memory: 4911  loss: 0.7774  decode.loss_ce: 0.5145  decode.acc_seg: 76.7236  aux.loss_ce: 0.2629  aux.acc_seg: 71.5275
2023/06/15 12:12:59 - mmengine - INFO - Iter(train) [1800/8000]  lr: 9.6349e-04  eta: 0:46:51  time: 0.4533  data_time: 0.0074  memory: 4911  loss: 0.7499  decode.loss_ce: 0.5046  decode.acc_seg: 80.8809  aux.loss_ce: 0.2453  aux.acc_seg: 77.7762
2023/06/15 12:13:45 - mmengine - INFO - Iter(train) [1900/8000]  lr: 9.6145e-04  eta: 0:46:07  time: 0.4524  data_time: 0.0071  memory: 4911  loss: 0.7867  decode.loss_ce: 0.5281  decode.acc_seg: 78.5679  aux.loss_ce: 0.2586  aux.acc_seg: 76.4048
2023/06/15 12:14:30 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230615-3_crop_size_20230615_115844
2023/06/15 12:14:30 - mmengine - INFO - Iter(train) [2000/8000]  lr: 9.5942e-04  eta: 0:45:20  time: 0.4497  data_time: 0.0068  memory: 4911  loss: 0.7653  decode.loss_ce: 0.5089  decode.acc_seg: 80.6243  aux.loss_ce: 0.2563  aux.acc_seg: 78.1155
2023/06/15 12:14:30 - mmengine - INFO - Saving checkpoint at 2000 iterations
2023/06/15 12:14:36 - mmengine - INFO - per class results:
2023/06/15 12:14:36 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    |  73.7 |  82.2 |
|    Road    | 45.82 | 63.51 |
|  Building  |  60.2 | 78.03 |
| Vegetation | 53.11 | 77.39 |
|   Water    | 88.75 | 96.06 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/15 12:14:36 - mmengine - INFO - Iter(val) [15/15]  aAcc: 79.9000  mIoU: 53.6000  mAcc: 66.2000  data_time: 0.0037  time: 0.2790
2023/06/15 12:15:22 - mmengine - INFO - Iter(train) [2100/8000]  lr: 9.5738e-04  eta: 0:44:36  time: 0.4498  data_time: 0.0070  memory: 4911  loss: 0.7073  decode.loss_ce: 0.4699  decode.acc_seg: 80.5007  aux.loss_ce: 0.2374  aux.acc_seg: 76.2213
2023/06/15 12:16:07 - mmengine - INFO - Iter(train) [2200/8000]  lr: 9.5534e-04  eta: 0:43:49  time: 0.4521  data_time: 0.0070  memory: 4911  loss: 0.7060  decode.loss_ce: 0.4705  decode.acc_seg: 78.7444  aux.loss_ce: 0.2355  aux.acc_seg: 77.2851
2023/06/15 12:16:52 - mmengine - INFO - Iter(train) [2300/8000]  lr: 9.5331e-04  eta: 0:43:03  time: 0.4500  data_time: 0.0073  memory: 4911  loss: 0.7515  decode.loss_ce: 0.5037  decode.acc_seg: 81.3301  aux.loss_ce: 0.2478  aux.acc_seg: 76.4521
2023/06/15 12:17:37 - mmengine - INFO - Iter(train) [2400/8000]  lr: 9.5127e-04  eta: 0:42:17  time: 0.4473  data_time: 0.0071  memory: 4911  loss: 0.7621  decode.loss_ce: 0.5082  decode.acc_seg: 84.9545  aux.loss_ce: 0.2540  aux.acc_seg: 82.9107
2023/06/15 12:17:41 - mmengine - INFO - per class results:
2023/06/15 12:17:41 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 74.57 | 83.62 |
|    Road    |  47.6 | 65.96 |
|  Building  | 60.86 | 76.84 |
| Vegetation | 52.59 | 76.61 |
|   Water    | 85.36 | 91.07 |
| Unlabeled  |  0.02 |  0.02 |
+------------+-------+-------+
2023/06/15 12:17:41 - mmengine - INFO - Iter(val) [15/15]  aAcc: 80.2100  mIoU: 53.5000  mAcc: 65.6900  data_time: 0.0038  time: 0.2747
2023/06/15 12:18:26 - mmengine - INFO - Iter(train) [2500/8000]  lr: 9.4923e-04  eta: 0:41:31  time: 0.4516  data_time: 0.0074  memory: 4911  loss: 0.6819  decode.loss_ce: 0.4465  decode.acc_seg: 85.5653  aux.loss_ce: 0.2354  aux.acc_seg: 80.4878
2023/06/15 12:19:11 - mmengine - INFO - Iter(train) [2600/8000]  lr: 9.4719e-04  eta: 0:40:45  time: 0.4532  data_time: 0.0078  memory: 4911  loss: 0.7183  decode.loss_ce: 0.4805  decode.acc_seg: 86.2040  aux.loss_ce: 0.2378  aux.acc_seg: 83.9233
2023/06/15 12:19:56 - mmengine - INFO - Iter(train) [2700/8000]  lr: 9.4515e-04  eta: 0:39:59  time: 0.4523  data_time: 0.0070  memory: 4911  loss: 0.7143  decode.loss_ce: 0.4743  decode.acc_seg: 82.1814  aux.loss_ce: 0.2400  aux.acc_seg: 76.1621
2023/06/15 12:20:41 - mmengine - INFO - Iter(train) [2800/8000]  lr: 9.4312e-04  eta: 0:39:14  time: 0.4510  data_time: 0.0075  memory: 4911  loss: 0.6789  decode.loss_ce: 0.4471  decode.acc_seg: 85.2932  aux.loss_ce: 0.2318  aux.acc_seg: 79.7300
2023/06/15 12:20:45 - mmengine - INFO - per class results:
2023/06/15 12:20:45 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 74.09 | 81.41 |
|    Road    | 48.25 |  71.4 |
|  Building  | 61.88 | 78.71 |
| Vegetation | 54.45 | 78.35 |
|   Water    | 88.52 | 93.84 |
| Unlabeled  |  0.44 |  0.44 |
+------------+-------+-------+
2023/06/15 12:20:45 - mmengine - INFO - Iter(val) [15/15]  aAcc: 80.3900  mIoU: 54.6000  mAcc: 67.3600  data_time: 0.0038  time: 0.2822
2023/06/15 12:21:30 - mmengine - INFO - Iter(train) [2900/8000]  lr: 9.4108e-04  eta: 0:38:28  time: 0.4545  data_time: 0.0076  memory: 4911  loss: 0.6608  decode.loss_ce: 0.4378  decode.acc_seg: 80.3528  aux.loss_ce: 0.2230  aux.acc_seg: 77.0331
2023/06/15 12:22:15 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230615-3_crop_size_20230615_115844
2023/06/15 12:22:15 - mmengine - INFO - Iter(train) [3000/8000]  lr: 9.3903e-04  eta: 0:37:42  time: 0.4505  data_time: 0.0070  memory: 4911  loss: 0.6726  decode.loss_ce: 0.4391  decode.acc_seg: 77.0442  aux.loss_ce: 0.2335  aux.acc_seg: 75.5880
2023/06/15 12:22:15 - mmengine - INFO - Saving checkpoint at 3000 iterations
2023/06/15 12:23:02 - mmengine - INFO - Iter(train) [3100/8000]  lr: 9.3699e-04  eta: 0:37:00  time: 0.4490  data_time: 0.0074  memory: 4911  loss: 0.6819  decode.loss_ce: 0.4533  decode.acc_seg: 82.3313  aux.loss_ce: 0.2286  aux.acc_seg: 79.8548
2023/06/15 12:23:47 - mmengine - INFO - Iter(train) [3200/8000]  lr: 9.3495e-04  eta: 0:36:14  time: 0.4514  data_time: 0.0072  memory: 4911  loss: 0.7075  decode.loss_ce: 0.4703  decode.acc_seg: 83.9732  aux.loss_ce: 0.2372  aux.acc_seg: 81.4362
2023/06/15 12:23:51 - mmengine - INFO - per class results:
2023/06/15 12:23:51 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 74.38 |  82.1 |
|    Road    | 49.02 | 72.36 |
|  Building  | 61.88 | 75.76 |
| Vegetation | 54.74 | 80.36 |
|   Water    | 88.48 | 93.36 |
| Unlabeled  |  1.0  |  1.02 |
+------------+-------+-------+
2023/06/15 12:23:51 - mmengine - INFO - Iter(val) [15/15]  aAcc: 80.6000  mIoU: 54.9200  mAcc: 67.4900  data_time: 0.0039  time: 0.2742
2023/06/15 12:24:36 - mmengine - INFO - Iter(train) [3300/8000]  lr: 9.3291e-04  eta: 0:35:29  time: 0.4506  data_time: 0.0070  memory: 4911  loss: 0.6901  decode.loss_ce: 0.4546  decode.acc_seg: 81.5633  aux.loss_ce: 0.2355  aux.acc_seg: 77.2633
2023/06/15 12:25:21 - mmengine - INFO - Iter(train) [3400/8000]  lr: 9.3087e-04  eta: 0:34:43  time: 0.4512  data_time: 0.0072  memory: 4911  loss: 0.6509  decode.loss_ce: 0.4262  decode.acc_seg: 85.3301  aux.loss_ce: 0.2247  aux.acc_seg: 78.2238
2023/06/15 12:26:06 - mmengine - INFO - Iter(train) [3500/8000]  lr: 9.2882e-04  eta: 0:33:58  time: 0.4528  data_time: 0.0068  memory: 4911  loss: 0.6652  decode.loss_ce: 0.4383  decode.acc_seg: 84.1248  aux.loss_ce: 0.2269  aux.acc_seg: 81.6109
2023/06/15 12:26:51 - mmengine - INFO - Iter(train) [3600/8000]  lr: 9.2678e-04  eta: 0:33:12  time: 0.4504  data_time: 0.0070  memory: 4911  loss: 0.6542  decode.loss_ce: 0.4311  decode.acc_seg: 81.2949  aux.loss_ce: 0.2231  aux.acc_seg: 77.8065
2023/06/15 12:26:55 - mmengine - INFO - per class results:
2023/06/15 12:26:55 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 73.91 | 81.59 |
|    Road    |  49.9 |  71.7 |
|  Building  | 61.09 | 74.13 |
| Vegetation | 53.12 | 82.46 |
|   Water    | 89.66 | 95.04 |
| Unlabeled  |  1.01 |  1.05 |
+------------+-------+-------+
2023/06/15 12:26:55 - mmengine - INFO - Iter(val) [15/15]  aAcc: 80.3900  mIoU: 54.7800  mAcc: 67.6600  data_time: 0.0038  time: 0.2849
2023/06/15 12:27:40 - mmengine - INFO - Iter(train) [3700/8000]  lr: 9.2473e-04  eta: 0:32:27  time: 0.4477  data_time: 0.0070  memory: 4911  loss: 0.5947  decode.loss_ce: 0.3938  decode.acc_seg: 89.4105  aux.loss_ce: 0.2009  aux.acc_seg: 85.8817
2023/06/15 12:28:25 - mmengine - INFO - Iter(train) [3800/8000]  lr: 9.2269e-04  eta: 0:31:41  time: 0.4501  data_time: 0.0071  memory: 4911  loss: 0.6267  decode.loss_ce: 0.4105  decode.acc_seg: 89.4801  aux.loss_ce: 0.2162  aux.acc_seg: 84.2153
2023/06/15 12:29:10 - mmengine - INFO - Iter(train) [3900/8000]  lr: 9.2064e-04  eta: 0:30:56  time: 0.4526  data_time: 0.0085  memory: 4911  loss: 0.6448  decode.loss_ce: 0.4303  decode.acc_seg: 84.7043  aux.loss_ce: 0.2145  aux.acc_seg: 82.0273
2023/06/15 12:29:56 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230615-3_crop_size_20230615_115844
2023/06/15 12:29:56 - mmengine - INFO - Iter(train) [4000/8000]  lr: 9.1860e-04  eta: 0:30:10  time: 0.4504  data_time: 0.0072  memory: 4911  loss: 0.6353  decode.loss_ce: 0.4112  decode.acc_seg: 87.2611  aux.loss_ce: 0.2241  aux.acc_seg: 84.8815
2023/06/15 12:29:56 - mmengine - INFO - Saving checkpoint at 4000 iterations
2023/06/15 12:30:01 - mmengine - INFO - per class results:
2023/06/15 12:30:01 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    |  74.0 | 80.71 |
|    Road    | 49.76 |  74.5 |
|  Building  | 63.13 | 80.94 |
| Vegetation | 57.35 | 79.63 |
|   Water    | 89.94 | 95.07 |
| Unlabeled  |  1.6  |  1.68 |
+------------+-------+-------+
2023/06/15 12:30:01 - mmengine - INFO - Iter(val) [15/15]  aAcc: 80.9500  mIoU: 55.9600  mAcc: 68.7600  data_time: 0.0038  time: 0.2733
2023/06/15 12:30:47 - mmengine - INFO - Iter(train) [4100/8000]  lr: 9.1655e-04  eta: 0:29:25  time: 0.4500  data_time: 0.0070  memory: 4911  loss: 0.6010  decode.loss_ce: 0.3903  decode.acc_seg: 81.1053  aux.loss_ce: 0.2107  aux.acc_seg: 77.3050
2023/06/15 12:31:32 - mmengine - INFO - Iter(train) [4200/8000]  lr: 9.1450e-04  eta: 0:28:39  time: 0.4485  data_time: 0.0068  memory: 4911  loss: 0.6308  decode.loss_ce: 0.4135  decode.acc_seg: 88.0952  aux.loss_ce: 0.2174  aux.acc_seg: 85.8969
2023/06/15 12:32:17 - mmengine - INFO - Iter(train) [4300/8000]  lr: 9.1246e-04  eta: 0:27:54  time: 0.4510  data_time: 0.0069  memory: 4911  loss: 0.6171  decode.loss_ce: 0.4038  decode.acc_seg: 83.4380  aux.loss_ce: 0.2133  aux.acc_seg: 79.9037
2023/06/15 12:33:02 - mmengine - INFO - Iter(train) [4400/8000]  lr: 9.1041e-04  eta: 0:27:08  time: 0.4523  data_time: 0.0075  memory: 4911  loss: 0.5674  decode.loss_ce: 0.3713  decode.acc_seg: 84.9308  aux.loss_ce: 0.1962  aux.acc_seg: 82.0722
2023/06/15 12:33:06 - mmengine - INFO - per class results:
2023/06/15 12:33:06 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 73.69 | 80.22 |
|    Road    | 50.15 | 71.75 |
|  Building  | 62.45 | 77.95 |
| Vegetation |  52.7 |  84.0 |
|   Water    | 90.88 | 96.11 |
| Unlabeled  |  1.17 |  1.21 |
+------------+-------+-------+
2023/06/15 12:33:06 - mmengine - INFO - Iter(val) [15/15]  aAcc: 80.4400  mIoU: 55.1700  mAcc: 68.5400  data_time: 0.0038  time: 0.2837
2023/06/15 12:33:52 - mmengine - INFO - Iter(train) [4500/8000]  lr: 9.0836e-04  eta: 0:26:24  time: 0.4524  data_time: 0.0072  memory: 4911  loss: 0.6114  decode.loss_ce: 0.3985  decode.acc_seg: 82.1944  aux.loss_ce: 0.2129  aux.acc_seg: 76.2900
2023/06/15 12:34:37 - mmengine - INFO - Iter(train) [4600/8000]  lr: 9.0631e-04  eta: 0:25:38  time: 0.4550  data_time: 0.0075  memory: 4911  loss: 0.5924  decode.loss_ce: 0.3862  decode.acc_seg: 82.5339  aux.loss_ce: 0.2062  aux.acc_seg: 77.6268
2023/06/15 12:35:22 - mmengine - INFO - Iter(train) [4700/8000]  lr: 9.0426e-04  eta: 0:24:53  time: 0.4490  data_time: 0.0071  memory: 4911  loss: 0.6321  decode.loss_ce: 0.4091  decode.acc_seg: 81.2965  aux.loss_ce: 0.2230  aux.acc_seg: 76.2986
2023/06/15 12:36:07 - mmengine - INFO - Iter(train) [4800/8000]  lr: 9.0221e-04  eta: 0:24:07  time: 0.4518  data_time: 0.0071  memory: 4911  loss: 0.6362  decode.loss_ce: 0.4203  decode.acc_seg: 83.6109  aux.loss_ce: 0.2159  aux.acc_seg: 80.8152
2023/06/15 12:36:11 - mmengine - INFO - per class results:
2023/06/15 12:36:11 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 74.74 | 81.98 |
|    Road    | 51.01 | 73.31 |
|  Building  | 63.73 | 79.97 |
| Vegetation | 56.85 | 80.67 |
|   Water    | 90.32 |  95.3 |
| Unlabeled  |  1.11 |  1.13 |
+------------+-------+-------+
2023/06/15 12:36:11 - mmengine - INFO - Iter(val) [15/15]  aAcc: 81.4700  mIoU: 56.2900  mAcc: 68.7300  data_time: 0.0037  time: 0.2773
2023/06/15 12:36:56 - mmengine - INFO - Iter(train) [4900/8000]  lr: 9.0016e-04  eta: 0:23:22  time: 0.4566  data_time: 0.0074  memory: 4911  loss: 0.5601  decode.loss_ce: 0.3609  decode.acc_seg: 90.6139  aux.loss_ce: 0.1993  aux.acc_seg: 88.0220
2023/06/15 12:37:41 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230615-3_crop_size_20230615_115844
2023/06/15 12:37:41 - mmengine - INFO - Iter(train) [5000/8000]  lr: 8.9810e-04  eta: 0:22:37  time: 0.4530  data_time: 0.0074  memory: 4911  loss: 0.5556  decode.loss_ce: 0.3559  decode.acc_seg: 86.0485  aux.loss_ce: 0.1997  aux.acc_seg: 81.7797
2023/06/15 12:37:41 - mmengine - INFO - Saving checkpoint at 5000 iterations
2023/06/15 12:38:28 - mmengine - INFO - Iter(train) [5100/8000]  lr: 8.9605e-04  eta: 0:21:52  time: 0.4469  data_time: 0.0070  memory: 4911  loss: 0.5838  decode.loss_ce: 0.3740  decode.acc_seg: 88.0873  aux.loss_ce: 0.2098  aux.acc_seg: 83.7781
2023/06/15 12:39:13 - mmengine - INFO - Iter(train) [5200/8000]  lr: 8.9400e-04  eta: 0:21:07  time: 0.4520  data_time: 0.0074  memory: 4911  loss: 0.5509  decode.loss_ce: 0.3659  decode.acc_seg: 89.2968  aux.loss_ce: 0.1850  aux.acc_seg: 87.1125
2023/06/15 12:39:17 - mmengine - INFO - per class results:
2023/06/15 12:39:17 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    |  75.7 | 83.88 |
|    Road    | 50.93 | 70.37 |
|  Building  | 63.85 | 80.13 |
| Vegetation | 58.81 | 79.82 |
|   Water    | 91.14 | 95.89 |
| Unlabeled  |  0.87 |  0.89 |
+------------+-------+-------+
2023/06/15 12:39:17 - mmengine - INFO - Iter(val) [15/15]  aAcc: 82.1400  mIoU: 56.8900  mAcc: 68.5000  data_time: 0.0035  time: 0.2741
2023/06/15 12:40:02 - mmengine - INFO - Iter(train) [5300/8000]  lr: 8.9194e-04  eta: 0:20:22  time: 0.4546  data_time: 0.0070  memory: 4911  loss: 0.5797  decode.loss_ce: 0.3809  decode.acc_seg: 86.9554  aux.loss_ce: 0.1988  aux.acc_seg: 84.2683
2023/06/15 12:40:47 - mmengine - INFO - Iter(train) [5400/8000]  lr: 8.8989e-04  eta: 0:19:36  time: 0.4528  data_time: 0.0070  memory: 4911  loss: 0.5614  decode.loss_ce: 0.3680  decode.acc_seg: 88.3055  aux.loss_ce: 0.1934  aux.acc_seg: 84.9935
2023/06/15 12:41:32 - mmengine - INFO - Iter(train) [5500/8000]  lr: 8.8784e-04  eta: 0:18:51  time: 0.4492  data_time: 0.0074  memory: 4911  loss: 0.6344  decode.loss_ce: 0.4170  decode.acc_seg: 83.8044  aux.loss_ce: 0.2174  aux.acc_seg: 82.2427
2023/06/15 12:42:17 - mmengine - INFO - Iter(train) [5600/8000]  lr: 8.8578e-04  eta: 0:18:06  time: 0.4523  data_time: 0.0075  memory: 4911  loss: 0.5530  decode.loss_ce: 0.3545  decode.acc_seg: 90.7009  aux.loss_ce: 0.1986  aux.acc_seg: 88.3528
2023/06/15 12:42:21 - mmengine - INFO - per class results:
2023/06/15 12:42:21 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 75.39 | 83.02 |
|    Road    | 52.02 | 71.56 |
|  Building  | 63.49 | 79.91 |
| Vegetation |  56.5 |  81.9 |
|   Water    | 89.42 | 93.48 |
| Unlabeled  |  1.44 |  1.5  |
+------------+-------+-------+
2023/06/15 12:42:21 - mmengine - INFO - Iter(val) [15/15]  aAcc: 81.7400  mIoU: 56.3800  mAcc: 68.5600  data_time: 0.0036  time: 0.2757
2023/06/15 12:43:06 - mmengine - INFO - Iter(train) [5700/8000]  lr: 8.8372e-04  eta: 0:17:20  time: 0.4515  data_time: 0.0074  memory: 4911  loss: 0.5317  decode.loss_ce: 0.3497  decode.acc_seg: 87.4365  aux.loss_ce: 0.1820  aux.acc_seg: 84.2267
2023/06/15 12:43:51 - mmengine - INFO - Iter(train) [5800/8000]  lr: 8.8167e-04  eta: 0:16:35  time: 0.4488  data_time: 0.0073  memory: 4911  loss: 0.5289  decode.loss_ce: 0.3509  decode.acc_seg: 81.7116  aux.loss_ce: 0.1781  aux.acc_seg: 76.6661
2023/06/15 12:44:36 - mmengine - INFO - Iter(train) [5900/8000]  lr: 8.7961e-04  eta: 0:15:50  time: 0.4504  data_time: 0.0070  memory: 4911  loss: 0.6350  decode.loss_ce: 0.4168  decode.acc_seg: 78.1987  aux.loss_ce: 0.2182  aux.acc_seg: 73.5881
2023/06/15 12:45:22 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230615-3_crop_size_20230615_115844
2023/06/15 12:45:22 - mmengine - INFO - Iter(train) [6000/8000]  lr: 8.7755e-04  eta: 0:15:04  time: 0.4540  data_time: 0.0071  memory: 4911  loss: 0.4976  decode.loss_ce: 0.3171  decode.acc_seg: 83.3839  aux.loss_ce: 0.1805  aux.acc_seg: 80.6323
2023/06/15 12:45:22 - mmengine - INFO - Saving checkpoint at 6000 iterations
2023/06/15 12:45:27 - mmengine - INFO - per class results:
2023/06/15 12:45:27 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 75.44 | 82.35 |
|    Road    |  53.1 | 74.87 |
|  Building  | 64.33 | 80.51 |
| Vegetation | 58.21 | 81.64 |
|   Water    | 90.72 | 96.64 |
| Unlabeled  |  1.93 |  2.03 |
+------------+-------+-------+
2023/06/15 12:45:27 - mmengine - INFO - Iter(val) [15/15]  aAcc: 82.1700  mIoU: 57.2900  mAcc: 69.6700  data_time: 0.0035  time: 0.2777
2023/06/15 12:46:12 - mmengine - INFO - Iter(train) [6100/8000]  lr: 8.7549e-04  eta: 0:14:19  time: 0.4495  data_time: 0.0072  memory: 4911  loss: 0.5874  decode.loss_ce: 0.3739  decode.acc_seg: 88.5494  aux.loss_ce: 0.2135  aux.acc_seg: 82.0024
2023/06/15 12:46:57 - mmengine - INFO - Iter(train) [6200/8000]  lr: 8.7343e-04  eta: 0:13:34  time: 0.4507  data_time: 0.0076  memory: 4911  loss: 0.5160  decode.loss_ce: 0.3388  decode.acc_seg: 86.2497  aux.loss_ce: 0.1772  aux.acc_seg: 83.2835
2023/06/15 12:47:43 - mmengine - INFO - Iter(train) [6300/8000]  lr: 8.7137e-04  eta: 0:12:49  time: 0.4530  data_time: 0.0076  memory: 4911  loss: 0.5269  decode.loss_ce: 0.3359  decode.acc_seg: 85.9713  aux.loss_ce: 0.1910  aux.acc_seg: 79.3308
2023/06/15 12:48:28 - mmengine - INFO - Iter(train) [6400/8000]  lr: 8.6931e-04  eta: 0:12:03  time: 0.4477  data_time: 0.0077  memory: 4911  loss: 0.5294  decode.loss_ce: 0.3454  decode.acc_seg: 87.0996  aux.loss_ce: 0.1840  aux.acc_seg: 84.5932
2023/06/15 12:48:32 - mmengine - INFO - per class results:
2023/06/15 12:48:32 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 75.27 |  82.2 |
|    Road    | 53.13 | 75.26 |
|  Building  | 64.86 | 81.31 |
| Vegetation | 58.32 | 82.01 |
|   Water    | 90.97 | 95.45 |
| Unlabeled  |  1.82 |  1.97 |
+------------+-------+-------+
2023/06/15 12:48:32 - mmengine - INFO - Iter(val) [15/15]  aAcc: 82.1500  mIoU: 57.3900  mAcc: 69.7000  data_time: 0.0035  time: 0.2820
2023/06/15 12:49:17 - mmengine - INFO - Iter(train) [6500/8000]  lr: 8.6725e-04  eta: 0:11:18  time: 0.4482  data_time: 0.0075  memory: 4911  loss: 0.5570  decode.loss_ce: 0.3559  decode.acc_seg: 80.6522  aux.loss_ce: 0.2011  aux.acc_seg: 74.2523
2023/06/15 12:50:02 - mmengine - INFO - Iter(train) [6600/8000]  lr: 8.6519e-04  eta: 0:10:33  time: 0.4510  data_time: 0.0072  memory: 4911  loss: 0.5184  decode.loss_ce: 0.3404  decode.acc_seg: 86.0957  aux.loss_ce: 0.1781  aux.acc_seg: 79.7387
2023/06/15 12:50:47 - mmengine - INFO - Iter(train) [6700/8000]  lr: 8.6313e-04  eta: 0:09:48  time: 0.4512  data_time: 0.0069  memory: 4911  loss: 0.5007  decode.loss_ce: 0.3221  decode.acc_seg: 87.2749  aux.loss_ce: 0.1785  aux.acc_seg: 82.9601
2023/06/15 12:51:32 - mmengine - INFO - Iter(train) [6800/8000]  lr: 8.6107e-04  eta: 0:09:02  time: 0.4520  data_time: 0.0075  memory: 4911  loss: 0.5081  decode.loss_ce: 0.3331  decode.acc_seg: 87.8058  aux.loss_ce: 0.1751  aux.acc_seg: 85.1645
2023/06/15 12:51:36 - mmengine - INFO - per class results:
2023/06/15 12:51:36 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 75.92 |  82.7 |
|    Road    |  54.0 | 77.09 |
|  Building  | 65.44 | 82.49 |
| Vegetation | 59.76 | 80.61 |
|   Water    | 90.52 |  94.9 |
| Unlabeled  |  1.45 |  1.54 |
+------------+-------+-------+
2023/06/15 12:51:36 - mmengine - INFO - Iter(val) [15/15]  aAcc: 82.6200  mIoU: 57.8500  mAcc: 69.8900  data_time: 0.0035  time: 0.2744
2023/06/15 12:52:21 - mmengine - INFO - Iter(train) [6900/8000]  lr: 8.5900e-04  eta: 0:08:17  time: 0.4501  data_time: 0.0069  memory: 4911  loss: 0.4997  decode.loss_ce: 0.3251  decode.acc_seg: 85.9294  aux.loss_ce: 0.1746  aux.acc_seg: 83.2581
2023/06/15 12:53:06 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230615-3_crop_size_20230615_115844
2023/06/15 12:53:06 - mmengine - INFO - Iter(train) [7000/8000]  lr: 8.5694e-04  eta: 0:07:32  time: 0.4536  data_time: 0.0076  memory: 4911  loss: 0.5514  decode.loss_ce: 0.3593  decode.acc_seg: 87.5149  aux.loss_ce: 0.1921  aux.acc_seg: 84.1301
2023/06/15 12:53:06 - mmengine - INFO - Saving checkpoint at 7000 iterations
2023/06/15 12:53:53 - mmengine - INFO - Iter(train) [7100/8000]  lr: 8.5487e-04  eta: 0:06:47  time: 0.4490  data_time: 0.0075  memory: 4911  loss: 0.5136  decode.loss_ce: 0.3281  decode.acc_seg: 90.6751  aux.loss_ce: 0.1856  aux.acc_seg: 86.2067
2023/06/15 12:54:38 - mmengine - INFO - Iter(train) [7200/8000]  lr: 8.5281e-04  eta: 0:06:02  time: 0.4550  data_time: 0.0070  memory: 4911  loss: 0.4912  decode.loss_ce: 0.3169  decode.acc_seg: 91.2862  aux.loss_ce: 0.1743  aux.acc_seg: 87.9860
2023/06/15 12:54:42 - mmengine - INFO - per class results:
2023/06/15 12:54:42 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 75.92 | 83.13 |
|    Road    | 53.98 | 73.76 |
|  Building  | 64.66 | 81.42 |
| Vegetation | 58.19 | 81.63 |
|   Water    | 90.87 | 95.92 |
| Unlabeled  |  1.91 |  2.04 |
+------------+-------+-------+
2023/06/15 12:54:42 - mmengine - INFO - Iter(val) [15/15]  aAcc: 82.5000  mIoU: 57.5900  mAcc: 69.6500  data_time: 0.0037  time: 0.2748
2023/06/15 12:55:27 - mmengine - INFO - Iter(train) [7300/8000]  lr: 8.5074e-04  eta: 0:05:16  time: 0.4553  data_time: 0.0076  memory: 4911  loss: 0.5183  decode.loss_ce: 0.3370  decode.acc_seg: 88.9253  aux.loss_ce: 0.1812  aux.acc_seg: 84.2534
2023/06/15 12:56:12 - mmengine - INFO - Iter(train) [7400/8000]  lr: 8.4868e-04  eta: 0:04:31  time: 0.4512  data_time: 0.0075  memory: 4911  loss: 0.4936  decode.loss_ce: 0.3203  decode.acc_seg: 86.2447  aux.loss_ce: 0.1733  aux.acc_seg: 82.5115
2023/06/15 12:56:57 - mmengine - INFO - Iter(train) [7500/8000]  lr: 8.4661e-04  eta: 0:03:46  time: 0.4524  data_time: 0.0074  memory: 4911  loss: 0.4764  decode.loss_ce: 0.3081  decode.acc_seg: 89.4698  aux.loss_ce: 0.1683  aux.acc_seg: 85.6649
2023/06/15 12:57:42 - mmengine - INFO - Iter(train) [7600/8000]  lr: 8.4454e-04  eta: 0:03:00  time: 0.4513  data_time: 0.0072  memory: 4911  loss: 0.5042  decode.loss_ce: 0.3264  decode.acc_seg: 84.3868  aux.loss_ce: 0.1778  aux.acc_seg: 78.2724
2023/06/15 12:57:46 - mmengine - INFO - per class results:
2023/06/15 12:57:46 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 75.12 | 81.85 |
|    Road    | 52.95 | 74.03 |
|  Building  | 64.62 | 81.17 |
| Vegetation | 56.81 |  83.3 |
|   Water    | 90.75 | 95.43 |
| Unlabeled  |  1.61 |  1.66 |
+------------+-------+-------+
2023/06/15 12:57:46 - mmengine - INFO - Iter(val) [15/15]  aAcc: 81.9200  mIoU: 56.9700  mAcc: 69.5700  data_time: 0.0037  time: 0.2824
2023/06/15 12:58:32 - mmengine - INFO - Iter(train) [7700/8000]  lr: 8.4247e-04  eta: 0:02:15  time: 0.4503  data_time: 0.0069  memory: 4911  loss: 0.5176  decode.loss_ce: 0.3298  decode.acc_seg: 87.1976  aux.loss_ce: 0.1878  aux.acc_seg: 83.0405
2023/06/15 12:59:17 - mmengine - INFO - Iter(train) [7800/8000]  lr: 8.4040e-04  eta: 0:01:30  time: 0.4481  data_time: 0.0072  memory: 4911  loss: 0.4587  decode.loss_ce: 0.2931  decode.acc_seg: 86.0318  aux.loss_ce: 0.1657  aux.acc_seg: 84.5119
2023/06/15 13:00:02 - mmengine - INFO - Iter(train) [7900/8000]  lr: 8.3833e-04  eta: 0:00:45  time: 0.4509  data_time: 0.0068  memory: 4911  loss: 0.5276  decode.loss_ce: 0.3430  decode.acc_seg: 85.5384  aux.loss_ce: 0.1847  aux.acc_seg: 82.9665
2023/06/15 13:00:47 - mmengine - INFO - Exp name: pspnet-DubaiDataset_20230615-3_crop_size_20230615_115844
2023/06/15 13:00:47 - mmengine - INFO - Iter(train) [8000/8000]  lr: 8.3626e-04  eta: 0:00:00  time: 0.4539  data_time: 0.0071  memory: 4911  loss: 0.4683  decode.loss_ce: 0.3010  decode.acc_seg: 86.6886  aux.loss_ce: 0.1673  aux.acc_seg: 82.9704
2023/06/15 13:00:47 - mmengine - INFO - Saving checkpoint at 8000 iterations
2023/06/15 13:00:52 - mmengine - INFO - per class results:
2023/06/15 13:00:52 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    Land    | 76.29 | 83.55 |
|    Road    | 54.24 | 73.87 |
|  Building  | 65.69 | 85.39 |
| Vegetation | 60.21 | 78.61 |
|   Water    | 91.26 | 95.44 |
| Unlabeled  |  2.02 |  2.12 |
+------------+-------+-------+
2023/06/15 13:00:52 - mmengine - INFO - Iter(val) [15/15]  aAcc: 82.9700  mIoU: 58.2800  mAcc: 69.8300  data_time: 0.0037  time: 0.2811
